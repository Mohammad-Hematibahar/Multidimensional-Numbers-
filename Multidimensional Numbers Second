
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, learning_curve
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.linear_model import LinearRegression, Ridge, Lasso
import os


np.random.seed(42)
plt.style.use('ggplot')
plt.rcParams.update({'font.size': 8})  

def create_data():
    base_data = {
        'Cement': np.linspace(300, 500, 200),
        'Water': np.linspace(300, 500, 200),
        'Strength': np.linspace(300, 500, 200)
    }
    df = pd.DataFrame(base_data)
    augmented_data = []
    for _ in range(800):
        sample = df.sample(1).iloc[0].copy()
        for col in ['Cement', 'Water']:
            noise = np.random.normal(0, 0.04 * sample[col])
            sample[col] = np.clip(sample[col] + noise, 300, 500)
        strength_noise = np.random.normal(0, 0.04 * sample['Strength'])
        sample['Strength'] = np.clip(sample['Strength'] + strength_noise, 300, 500)
        augmented_data.append(sample)
    return pd.concat([df, pd.DataFrame(augmented_data)], ignore_index=True)

df = create_data()
X = df[['Cement', 'Water']]
y = df['Strength']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

models = {
    "Linear Regression": LinearRegression(),
    "Ridge Regression": Ridge(alpha=1),
    "Lasso Regression": Lasso(alpha=0.1),
    "Support Vector": SVR(kernel='linear'),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "Gradient Boosting": GradientBoostingRegressor(n_estimators=100, random_state=42),
    "Neural Network": MLPRegressor(hidden_layer_sizes=(50,), max_iter=1000, random_state=42)
}

os.makedirs("charts", exist_ok=True)


cement_range = np.linspace(300, 500, 50)
water_range = np.linspace(300, 500, 50)
cement_grid, water_grid = np.meshgrid(cement_range, water_range)
grid_df = pd.DataFrame({
    'Cement': cement_grid.ravel(),
    'Water': water_grid.ravel()
})
grid_scaled = scaler.transform(grid_df)

results = []
for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = np.clip(model.predict(X_test_scaled), 300, 500)
    residuals = y_test - y_pred
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)
    results.append({'Model': name, 'RMSE': rmse, 'R²': r2})

   
    plt.figure(figsize=(8, 5))
    plt.scatter(y_test, y_pred, alpha=0.6, color='dodgerblue', edgecolor='k', s=60)
    plt.plot([300, 500], [300, 500], 'r--')
    plt.xlabel('Experimental')
    plt.ylabel('Predicted')
    plt.title(f'{name}\nRMSE: {rmse:.2f}, R²: {r2:.4f}')
    plt.grid(True)
    plt.savefig(f'charts/{name.replace(" ", "_")}_prediction.png')
    plt.close()

    plt.figure(figsize=(8, 4))
    plt.scatter(y_pred, residuals, alpha=0.6, color='darkorange', edgecolor='k', s=60)
    plt.axhline(0, color='black', linestyle='--')
    plt.xlabel('Predicted')
    plt.ylabel('Residuals')
    plt.title(f'Residual Plot - {name}')
    plt.grid(True)
    plt.savefig(f'charts/{name.replace(" ", "_")}_residual.png')
    plt.close()

    plt.figure(figsize=(7, 4))
    plt.hist(residuals, bins=30, color='teal', edgecolor='black', alpha=0.7)
    plt.title(f'Residual Histogram - {name}')
    plt.xlabel('Residuals')
    plt.ylabel('Frequency')
    plt.grid(True)
    plt.savefig(f'charts/{name.replace(" ", "_")}_residual_hist.png')
    plt.close()

    # 3D Surface Plot
    try:
        predicted_surface = model.predict(grid_scaled).reshape(cement_grid.shape)
        fig = plt.figure(figsize=(9, 5))
        ax = fig.add_subplot(111, projection='3d')
        ax.plot_surface(cement_grid, water_grid, predicted_surface, cmap='plasma', alpha=0.9)
        ax.set_xlabel('Cement')
        ax.set_ylabel('Water')
        ax.set_zlabel('Predicted Strength')
        ax.set_title(f'3D Surface - {name}')
        fig.tight_layout()
        plt.savefig(f'charts/{name.replace(" ", "_")}_3D_surface.png')
        plt.close()
    except:
        pass

    # Learning Curve
    try:
        train_sizes, train_scores, test_scores = learning_curve(
            model, X_train_scaled, y_train,
            cv=5, scoring='r2',
            train_sizes=np.linspace(0.1, 1.0, 10)
        )
        train_mean = np.mean(train_scores, axis=1)
        test_mean = np.mean(test_scores, axis=1)

        plt.figure(figsize=(8, 4.5))
        plt.plot(train_sizes, train_mean, 'o-', label='Training score')
        plt.plot(train_sizes, test_mean, 'o-', label='Cross-validation score')
        plt.title(f'Learning Curve - {name}')
        plt.xlabel('Training Set Size')
        plt.ylabel('R² Score')
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.savefig(f'charts/{name.replace(" ", "_")}_learning_curve.png')
        plt.close()
    except:
        pass


metrics_df = pd.DataFrame(results)
metrics_df.to_csv('charts/models_performance_summary.csv', index=False)
